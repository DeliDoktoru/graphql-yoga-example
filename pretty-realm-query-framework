//schema
const schema={
    test : {
        name: 'test',
        primaryKey: 'id',
        properties: {
            id: 'int',
            name: 'string',
            silindiMi: 'int',
        }
    },
    autoIncrement : {
        name: 'autoIncrement',
        primaryKey: 'tableName',
        properties: {
            tableName: 'string',
            count: 'int',

        }
        
    }
}
export default Object.keys(schema).map(x=>schema[x]);



//db
import Realm from 'realm';
import schema from './schema';

function getOptions() {
    var a=schema;
    return {
        schema: schema,
        schemaVersion: 11
    };
}

function openDb() {
    return Realm.open(getOptions());
}

async function getMaxId(tableName,realm){
  var result=realm.objects('autoIncrement').filtered('tableName="'+tableName+'"')[0];
  var Id;
  if( result == null ){
    realm.write(()=>{  realm.create('autoIncrement',{tableName:tableName , count:2 }) });
    Id=1;
  }
  else if( result.count == null ){
    realm.write(() => { result.count = 2; });
    Id=1;
  }
  else{
    Id=result.count;
    nextId=parseInt(Id);
    if(isNaN(nextId)){
      Id=1;
      realm.write(() => { result.count = 2; });
    }
    else{
      realm.write(() => { result.count = Id+1; });  
    }
  }  
  if(Id == null){
    throw "idbulunamadi";
  }
  return Id;
}


export default  {
    createData: async function (tableName,data) {
        return new Promise( function (resolve, reject) {
            openDb().then(async (realm) => {
                var Id=await getMaxId(tableName,realm);
                data.id=Id;
                data.silindiMi=0;
                realm.write(() => {
                    resolve(realm.create(tableName, data));
                });
            });
        });
    },
    getDatas: async function (tableName) {
        return new Promise(function (resolve, reject) {
            openDb().then(realm => {
                resolve(Array.from(realm.objects(tableName)).filtered('silindiMi=0'));
            });
        });
    },
    getDataById: async function(tableName,id){
      return new Promise(function (resolve, reject) {
        openDb().then(realm => {
            resolve(realm.objects(tableName).filtered('id="'+id+'" AND silindiMi=0')[0]);
        });
      });
    },
    deleteDataById: async function(tableName,id){
      return new Promise(function (resolve, reject) {
        openDb().then(realm => {
            var result=realm.objects(tableName).filtered('id="'+id+'" AND silindiMi=0')[0];
            if(result){
              resolve(realm.write(() => { result.silindiMi = 1; }));
            }
            else{
              reject("veribulunamadi");
            }
        });
      });
    },
    updateDataById: async function(tableName,id,data){
      return new Promise(function (resolve, reject) {
        openDb().then(realm => {
            var result=realm.objects(tableName).filtered('id="'+id+'" AND silindiMi=0')[0];
            if(result){
              resolve(realm.write(() => { 
                for(prop in data){
                  result[prop]=data[prop];
                }
               }));
            }
            else{
              reject("veribulunamadi");
            }
        });
      });
    },
    deleteDb: function () {
        openDb().then(realm => {
            realm.write(() => {
                realm.deleteAll();
            });
        });
    }
      

}
